
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++









+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
1 创建数据库
启动MySQL
service mysqld start

登录
mysql -h 主机地址 -u 用户名 -p 用户密码
mysql -uroot -p
mysql -h110.110.110.110 -uroot -p123456

创建新用户
grant 权限1, 权限2, 权限n on 库名.表名 to 用户名@用户地址 identified by '连接口令'; 
grant all privileges  on sample.*  to a01@localhost identified by '123456'; 

退出
exit

练习－基本命令

创建新用户(min 123)
? insert into mysql.user(Host, User, Password) values("localhost", "min", password("123");
mysql> create user 'min'@'localhost' identified by '123'

授权
mysql> grant all on test_db.* to 'min'@localhost;

刷新系统权限表
mysql> flush privileges;

设置与更改用户密码
mysql> set password for 'min'@localhost=password('');

mysql> update mysql.user set password=password('123') where User='min';	失败
ERROR 1054 (42S22): Unknown column 'password' in 'field list'

撤销用户权限
mysql> revoke select on *.* from 'min'@'localhost';

删除用户
mysql> drop user 'min'@'localhost';

mysql> delete from mysql.user where User='min' and Host='localhost';	表中删除了，但还能登录

建库
mysql> create database test_db;

建表
mysql> use test_db
Database changed
mysql> create table test_tb(id int(4) primary key auto_increment, name char(16) );

显示表结构
mysql> desc test_tb;

表中插入一行
mysql> insert into test_tb values(1, 'wang1');

查看
mysql> select * from test_tb;

表中插入一行－－非标准格式
mysql> insert into test_db (name) values('wang2');

查看－－按name列降序、升序
mysql> select id, name from test_tb order by name desc;
mysql> select id, name from test_tb order by name asc;

其他
mysql> insert into test_tb values(4, 'zhang4');

删除行
mysql> delete from test_tb where id=2;

删除表
mysql> drop table test_tb;

删除库
mysql> drop database test_db;


2 数据导入与数据查询
数据导入
insert into 表名 [列名1, 列名2, ...] values (值)
load data LOCAL infile "./stu.txt" into table stu;	先将数据按表属性排列，保存到txt文件中

数据查询

3 数据更新和视图及安全性、完整性控制

4 创建CAP数据库
5 CAP数据库查询练习
6 CAP数据库复杂查询练习
著名 CAP理论：在分布式数据库应用中，任何分布式系统只可同时满足CAP其中两点，无法三者兼顾。
Consistency(一致性), 数据一致更新，所有数据变动都是同步的。
Availability(可用性), 好的响应性能。
Partition tolerance(分区容错性) 可靠性。
CA 系统是要求高可用用并且实时一致性。单点数据库是符合这种架构的，例如超市收银系统，图书管理系统。
AP 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。例如博客系统。
CP 系统是要求满足一致性，分区容忍性，通常性能不是特别高。例如火车售票系统。
忠告：架构师不要将精力浪费在如何设计能满足三者的完美分布式系统，而是应该进行取舍。


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
SQL Server

数据库操作：创建DB、查看DB属性、删除DB
表操作：创建表、修改表结构（添加列、修改列类型、删除列）、删除表、向表中输入记录
数据完整性：空值约束、默认值约束、默认值对象、检查约束、规则约束对象、主键、唯一性约束、标识列、外键
数据更新：表中插入数据、修改表中数据、删除表中数据
数据查询：
简单查询（查询表中所有列、查询表中指定列信息、在查询列表中使用列表达式、重新命名查询结果、增加说明列、查询列表中使用系统函数、消除查询结果中的重复项、取得查询结果的部分行集）
条件查询（使用关系表达式表示查询条件、使用逻辑表达式表示查询条件、使用LIKE关键字进行模糊查询、使用Between..And关键字进行查询、使用IN关键字进行查询、使用[NOT]NULL关键字进行查询）
查询排序与查询结果存储（）
查询统计与汇总()
连接查询()
子查询()
数据更新与子查询()
事务和锁
索引
视图
游标
存储过程
自定义函数
触发器

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
工具的使用和库的简单查询
排序检索数据和数据过滤
库的建立和表的操作
正则表达式和创建计算字段
汇总数据和分组数据
使用子查询和联结表
高级联结和组合查询
使用视图和存储过程

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
































